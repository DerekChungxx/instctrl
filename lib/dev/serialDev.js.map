{"version":3,"sources":["../../src/dev/serialDev.js"],"names":["SerialPort","require","pwrModel","supportedPort","devIdn","devOpen","Num","devName","resolve","reject","port","baudRate","autoOpen","on","data","console","log","toString","split","close","err","message","open","write","error","serialDevSearch","i"],"mappings":";;;;;AAAA;AACA;AACA,IAAMA,aAAaC,QAAQ,YAAR,CAAnB;;AAEA,IAAMC,WAAW,CAAC,KAAD,CAAjB;;AAEA,IAAMC,gBAAgB,CAAC,cAAD,EAAiB,cAAjB,CAAtB;AACA;;AAEA,IAAMC,SAAS,EAAf;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgD;AAAE;AAChD,MAAMC,OAAO,IAAIV,UAAJ,CAAeO,OAAf,EAAwB,EAAEI,UAAU,IAAZ,EAAkBC,UAAU,KAA5B,EAAxB,CAAb;AACA;;AAEAF,OAAKG,EAAL,CAAQ,MAAR,EAAgB,UAACC,IAAD,EAAU;AACxBC,YAAQC,GAAR,UAAmBV,GAAnB;AACAS,YAAQC,GAAR,UAAmBV,GAAnB,UAA2BQ,KAAKG,QAAL,EAA3B;AACAb,WAAOE,GAAP,IAAcQ,KAAKG,QAAL,EAAd;AACAF,YAAQC,GAAR,UAAmBV,GAAnB,UAA2BF,OAAOE,GAAP,EAAYY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAA3B;AACA,QAAId,OAAOE,GAAP,EAAYY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4ChB,SAAS,CAAT,CAAhD,EAA6D;AAC3Da,cAAQC,GAAR,YAAqBV,GAArB,UAA6BF,OAAOE,GAAP,EAAYY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA7B,SAA0Dd,OAAOE,GAAP,EAAYY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA1D;AACAV,cAAWJ,OAAOE,GAAP,EAAYY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAX,SAAwCd,OAAOE,GAAP,EAAYY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAxC;AACD;;AAEDR,SAAKS,KAAL;AACD,GAXD;;AAaA;AACAT,OAAKG,EAAL,CAAQ,MAAR,EAAgB,YAAM;AACpBE,YAAQC,GAAR,UAAmBV,GAAnB,UAA2BC,OAA3B;AACD,GAFD;;AAIAG,OAAKG,EAAL,CAAQ,OAAR,EAAiB,UAACO,GAAD,EAAS;AACxBL,YAAQC,GAAR,aAAsBI,IAAIC,OAA1B;AACD,GAFD;;AAIAX,OAAKY,IAAL,CAAU,UAACF,GAAD,EAAS;AACjB,QAAIA,GAAJ,EAAS;AACP,aAAOL,QAAQC,GAAR,UAAmBV,GAAnB,8BAA+Cc,IAAIC,OAAnD,CAAP;AACD;;AAEDX,SAAKa,KAAL,CAAW,WAAX,EAAwB,UAACC,KAAD,EAAW;AACjC,UAAIA,KAAJ,EAAW;AACT,eAAOT,QAAQC,GAAR,UAAmBV,GAAnB,0BAA2CkB,MAAMH,OAAjD,CAAP;AACD;AACDN,cAAQC,GAAR,UAAmBV,GAAnB;AACA,aAAO,IAAP;AACD,KAND;;AAQA,WAAO,IAAP;AACD,GAdD;;AAiBF;AACA;AACA;AACA;AACA;AACC;;AAGD,SAASmB,eAAT,CAAyBjB,OAAzB,EAAkCC,MAAlC,EAA0C;AACxC,OAAK,IAAIiB,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,KAAK,CAA5B,EAA+B;AAC7BrB,YAAQqB,CAAR,EAAWvB,cAAcuB,CAAd,CAAX,EAA6BlB,OAA7B,EAAsCC,MAAtC,EAD6B,CACkB;AAChD;AACD;AACD;kBACcgB,e","file":"serialDev.js","sourcesContent":["/* eslint class-methods-use-this: \"off\" */\n// const fs = require('fs');\nconst SerialPort = require('serialport');\n\nconst pwrModel = ['PFR'];\n\nconst supportedPort = ['/dev/ttyACM0', '/dev/ttyACM1'];\n// const port = new SerialPort('/dev/ttyACM0', { autoOpen: false });\n\nconst devIdn = [];\n\nfunction devOpen(Num, devName, resolve, reject) { // eslint-disable-line no-unused-vars\n  const port = new SerialPort(devName, { baudRate: 9600, autoOpen: false });\n  //   const usbInstrument = new UsbInst(port);\n\n  port.on('data', (data) => {\n    console.log(`Port${Num}: ** Response buffer **`);\n    console.log(`Port${Num}: ${data.toString()}`);\n    devIdn[Num] = data.toString();\n    console.log(`Port${Num}: ${devIdn[Num].split(',')[1].split('-')[0]}`);\n    if (devIdn[Num].split(',')[1].split('-')[0] === pwrModel[0]) {\n      console.log(`devIdn${Num}= ${devIdn[Num].split(',')[1]},${devIdn[Num].split(',')[2]}`);\n      resolve(`${devIdn[Num].split(',')[1]},${devIdn[Num].split(',')[2]}`);\n    }\n\n    port.close();\n  });\n\n  // The open event is always emitted\n  port.on('open', () => {\n    console.log(`Port${Num}: ${devName} is open!`);\n  });\n\n  port.on('error', (err) => {\n    console.log(`Error: ${err.message}`);\n  });\n\n  port.open((err) => {\n    if (err) {\n      return console.log(`Port${Num}: Error opening port: ${err.message}`);\n    }\n\n    port.write('*idn?\\r\\n', (error) => {\n      if (error) {\n        return console.log(`Port${Num}: Error on write: ${error.message}`);\n      }\n      console.log(`Port${Num}: message written`);\n      return true;\n    });\n\n    return true;\n  });\n\n\n//   usbInstrument.openUsb1();\n//   usbInstrument.port.write('*idn?\\r\\n');\n//   setTimeout(usbInstrument.closeUsb1, 5000);\n//   setTimeout(usbInstrument.openUsb2, 10000);\n//   setTimeout(usbInstrument.writeout, 15000);\n}\n\n\nfunction serialDevSearch(resolve, reject) {\n  for (let i = 0; i < 2; i += 1) {\n    devOpen(i, supportedPort[i], resolve, reject); // eslint-disable-line no-unused-vars\n  }\n  // supportedPort.map(key, () => {})\n}\nexport default serialDevSearch;\n\n"]}